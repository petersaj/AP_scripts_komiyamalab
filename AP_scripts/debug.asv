%% Calculate moving baseline by finding gaussian fit within window
tic

baseline_window = 6000;
baseline_window_step = 2000;
min_baseline_length = 300;
max_consec = 20;
size_file = 4000;

size_smooth = 90;
smooth_type = 'loess';

% Estimate noise through smoothing
roi_trace_long_smooth = zeros(size(roi_trace_long));
for i = 1:size(roi_trace_long,1);
    for j = 1:size(roi_trace_long,2)/size_file;
        roi_trace_long_smooth(i,size_file*(j-1)+1:size_file*(j-1)+size_file) = smooth(roi_trace_long(i,size_file*(j-1)+1:size_file*(j-1)+size_file),size_smooth,smooth_type);
    end
end
smooth_std = zeros(size(roi_trace_long,1),1);
smooth_std = sqrt(sum((abs(roi_trace_long - roi_trace_long_smooth).^2)/size(roi_trace_long_smooth,2),2));

% Estimate baseline: threshold trace, mirror below threshold to above
% threshold, match standard deviation with estimated noise
roi_trace_df = zeros(size(roi_trace_long));

% make a baseline matrix: all points not estimated are NaN
estimate_baseline_all = nan(size(roi_trace_long));
baseline_mode_all = nan(size(roi_trace_long));
baseline_trace_indx_all = cell(size(roi_trace_long,1),1);

for roi = 1:size(roi_trace_long,1);
    
    curr_frame = baseline_window/2+1;
    
    while curr_frame < size(roi_trace_long,2)-baseline_window/2;
        
        curr_frame_range = [curr_frame-baseline_window/2:curr_frame+baseline_window/2];
        curr_trace = roi_trace_long(roi,curr_frame_range);
        
        options = optimset('Algorithm','interior-point');
        options = optimset('MaxFunEvals',2000);
        lb = min(roi_trace_long(roi,:));
        ub = max(roi_trace_long(roi,:));
        starting = lb+(ub-lb)/2;
        
        %     % this function minimizes the absolute difference between the estimated
        %     % standard deviation, and the standard deviation of the mirrored trace
        %     % below threshold
        %     estimate_baseline = fminsearch(@(x) ...
        %         abs(smooth_std(i)- ...
        %         std([(roi_trace_long(i,(roi_trace_long(i,:) < x))-x) ...
        %         -(roi_trace_long(i,(roi_trace_long(i,:) < x))-x)])),starting);
        %
        %%% THIS IS FOR THE MODE RESTIMATION
        % this function minimizes the absolute difference between the estimated
        % standard deviation, and the standard deviation of the mirrored trace
        % below threshold
        estimate_baseline = fminsearch(@(x) ...
            AP_fitBaselineGaussian(x,smooth_std(roi),curr_trace),starting);
        
        % correct the baseline by looking for the mode of the cutoff assumed to
        % be just baseline (get better mode estimate by rounding baseline_trace
        % to the nearest interger)
        baseline_ub = estimate_baseline + 2*smooth_std(roi);
        baseline_lb = estimate_baseline - 2*smooth_std(roi);
        baseline_trace = curr_trace(curr_trace > baseline_lb &...
            curr_trace < baseline_ub);
        baseline_trace_indx = find(curr_trace > baseline_lb &...
            curr_trace < baseline_ub) + curr_frame-baseline_window/2;
        baseline_mode = mode(round(baseline_trace));
        
        baseline_trace_below_indx = find(curr_trace < baseline_mode);
        
        % find longest consecutive run
        consec_below = [0 diff(baseline_trace_below_indx) == 1 0];
        p = find(~consec_below);%find 0
        longest_consec = max(diff(p)-1);
        
        % 1) ignore if number of baseline points below minimum
        % 2) ignore if based off of too many consecutive samples below thresh
        if length(baseline_trace) > min_baseline_length &&...
                longest_consec < max_consec
            baseline_mode_all(roi,curr_frame) = baseline_mode;
            estimate_baseline_all(roi,curr_frame) = estimate_baseline;
            baseline_trace_indx_all{roi} = [baseline_trace_indx_all{roi} baseline_trace_indx];
        end
        
        % this is to actually correct the raw trace
        %         roi_trace_df(roi,:) = (roi_trace_long(roi,:)-estimate_baseline)/estimate_baseline;
        
        curr_frame = curr_frame + baseline_window_step;
        
    end
end

% if no good estimate, then just try to estimate by the whole trace
for roi = 1:size(roi_trace_long,1);
    if ~all(isnan(estimate_baseline_all(roi,:)))
        continue
    end
    disp(['WARNING: No good baseline for ' num2str(roi) ', estimating from whole trace']);
     options = optimset('Algorithm','interior-point');
        options = optimset('MaxFunEvals',2000);
        lb = min(roi_trace_long(roi,:));
        ub = max(roi_trace_long(roi,:));
        starting = lb+(ub-lb)/2;
        
        curr_trace = roi_trace_long(roi,:);
        curr_frame = round(size(roi_trace_long,2)/2);
        %%% THIS IS FOR THE MODE RESTIMATION
        % this function minimizes the absolute difference between the estimated
        % standard deviation, and the standard deviation of the mirrored trace
        % below threshold
        estimate_baseline = fminsearch(@(x) ...
            AP_fitBaselineGaussian(x,smooth_std(roi),curr_trace),starting);
        
        % correct the baseline by looking for the mode of the cutoff assumed to
        % be just baseline (get better mode estimate by rounding baseline_trace
        % to the nearest interger)
        baseline_ub = estimate_baseline + 2*smooth_std(roi);
        baseline_lb = estimate_baseline - 2*smooth_std(roi);
        baseline_trace = curr_trace(curr_trace > baseline_lb &...
            curr_trace < baseline_ub);
        baseline_trace_indx = find(curr_trace > baseline_lb &...
            curr_trace < baseline_ub);
        baseline_trace_indx_all{roi} = [baseline_trace_indx_all{roi} baseline_trace_indx];
        baseline_mode = mode(round(baseline_trace));
        baseline_mode_all(roi,curr_frame) = baseline_mode;
        estimate_baseline_all(roi,curr_frame) = estimate_baseline;
end

% interpolate baseline between estimated baseline points
estimate_baseline_discrete = estimate_baseline_all;
for roi = 1:size(roi_trace_long,1);
    if all(isnan(estimate_baseline_all(roi,:)))
        disp(['WARNING: No good estimate for ROI ' num2str(roi)]);
        continue
    end
    frame_estimates_x = [];
    frame_estimates_x = find(isnan(estimate_baseline_all(roi,:)) == 0);
    frame_estimates_y = [];
    frame_estimates_y = estimate_baseline_all(roi,frame_estimates_x);
    % assume baseline start and end are the same as the first and last
    % estimates of baseline
    frame_estimates_x = [1 frame_estimates_x size(roi_trace_long,2)];
    frame_estimates_y = [frame_estimates_y(1) frame_estimates_y frame_estimates_y(end)];
    estimate_baseline_all(roi,:) = ...
        interp1(frame_estimates_x,frame_estimates_y,1:size(roi_trace_long,2));
end

% interpolate baseline between estimated baseline mode points
baseline_mode_discrete = baseline_mode_all;
for roi = 1:size(roi_trace_long,1);
    if all(isnan(baseline_mode_all(roi,:)))
        continue
    end
    frame_estimates_x = [];
    frame_estimates_x = find(isnan(baseline_mode_all(roi,:)) == 0);
    frame_estimates_y = [];
    frame_estimates_y = baseline_mode_all(roi,frame_estimates_x);
    % assume baseline start and end are the same as the first and last
    % estimates of baseline
    frame_estimates_x = [1 frame_estimates_x size(roi_trace_long,2)];
    frame_estimates_y = [frame_estimates_y(1) frame_estimates_y frame_estimates_y(end)];
    baseline_mode_all(roi,:) = ...
        interp1(frame_estimates_x,frame_estimates_y,1:size(roi_trace_long,2));
end
toc

%% Check histogram for moving
for roi = 1
    figure;
    %subplot(2,1,1); 
    hold on;
    plot(baseline_trace_indx_all{roi},roi_trace_long(roi,baseline_trace_indx_all{roi}),'.b');
    plot(roi_trace_long(roi,:),'k');
    plot(roi_trace_long_smooth(roi,:),'r');
    plot(estimate_baseline_all(roi,:),'-b','linewidth',2);
    plot(estimate_baseline_discrete(roi,:),'.m','MarkerSize',10);
    
    plot(baseline_mode_all(roi,:),'-g','linewidth',2);
    plot(baseline_mode_discrete(roi,:),'.c','MarkerSize',10)

    % plot dotted lines for STDs (from avg baseline)
    curr_mean_baseline = mean(estimate_baseline_all(roi,:));
    line(xlim, [curr_mean_baseline+10*smooth_std(i) curr_mean_baseline+10*smooth_std(i)],'color','k', 'linestyle','--','linewidth',1);
    line(xlim, [curr_mean_baseline+20*smooth_std(i) curr_mean_baseline+20*smooth_std(i)],'color','k', 'linestyle','--','linewidth',1);
    line(xlim, [curr_mean_baseline+30*smooth_std(i) curr_mean_baseline+30*smooth_std(i)],'color','k', 'linestyle','--','linewidth',1);
    line(xlim, [curr_mean_baseline+40*smooth_std(i) curr_mean_baseline+40*smooth_std(i)],'color','k', 'linestyle','--','linewidth',1);
    line(xlim, [curr_mean_baseline+50*smooth_std(i) curr_mean_baseline+50*smooth_std(i)],'color','k', 'linestyle','--','linewidth',1);
    
%     % fill area of baseline for std
%     x_plot = xlim;
%     a = (estimate_baseline_all(roi)+smooth_std(roi))*ones(1,round(x_plot(2)-x_plot(1)));
%     b = (estimate_baseline_all(roi)-smooth_std(roi))*ones(1,round(x_plot(2)-x_plot(1)));
%     jbfill([x_plot(1)+1:x_plot(2)],a,b,'b','none',0,0.5);
%     a = (estimate_baseline_all(roi)+2*smooth_std(roi))*ones(1,round(x_plot(2)-x_plot(1)));
%     b = (estimate_baseline_all(roi)-2*smooth_std(roi))*ones(1,round(x_plot(2)-x_plot(1)));
%     jbfill([x_plot(1)+1:x_plot(2)],a,b,'g','none',0,0.5);
    
%     subplot(2,1,2); hold on;
%     baseline_ub = estimate_baseline_all(roi) + 2*smooth_std(roi);
%     baseline_lb = estimate_baseline_all(roi) - 2*smooth_std(roi);
%     baseline_trace = roi_trace_long(roi,(roi_trace_long(roi,:) > baseline_lb &...
%         roi_trace_long(roi,:) < baseline_ub));
%     hist(baseline_trace,100);
%     line([estimate_baseline_all(roi) estimate_baseline_all(roi)],ylim,'color','k','linewidth',2)
%     line([mode(round(baseline_trace)) mode(round(baseline_trace))],ylim,'color','r','linewidth',2)
end
