analysis = AP_corticospinal_prepare_loaded(data);
% analysis = AP_corticospinal_prepare_loaded

%% Lever and task behavior 

for curr_animal = 1:length(data)
        
    for curr_session = 1:num_sessions
        
        %curr_file = [analysis_path filesep analysis_files(curr_session).name];
        curr_file = [analysis_path filesep analysis_files{curr_session}];
        curr_data = load(curr_file);
        
        % Skip if no behavior file (forgot to save)
        if ~isfield(curr_data.bhv,'bhv_times')
            continue
        end
        
        num_trials = length(curr_data.bhv.bhv_times);
        rewarded_trials = cellfun(@(x) ~isempty(x.states.reward),curr_data.bhv.bhv_times);
        
        %%% Lever properties
        
        % Initialize
        analysis(curr_animal).lever(curr_session).reaction_time = nan(num_trials,1);
        analysis(curr_animal).lever(curr_session).move_to_reward_time = nan(num_trials,1);
        analysis(curr_animal).lever(curr_session).rewarded_movement_time = nan(num_trials,1);
        analysis(curr_animal).lever(curr_session).rewarded_movement = cell(num_trials,1);
        
        % Parse movement - NOTE: this doesn't seem to be doing as good of a job
        % as it used to?
        [lever_active,lever_force_resample] = ...
            AP_parseLeverMovement_updated(curr_data.bhv.lever_force);
        
        curr_move_onset_frames = nan(num_trials,1);
        
        % Only go through trials which are rewarded and imaged
        for curr_trial = intersect(find(rewarded_trials)',curr_data.bhv.trial_list(:,2)');
            
            % Get the offset between xsg and bhv
            curr_list_idx = find(curr_data.bhv.trial_list(:,2) == curr_trial);
            curr_xsg_bhv_offset = curr_data.bhv.trial_list(curr_list_idx,1) - ...
                curr_data.bhv.bhv_times{curr_trial}.states.bitcode(1);
            
            % Get the reward in xsg time (in ms)
            if isfield(curr_data.bhv.bhv_times{curr_trial}.states,'reward_delay')
                curr_reward_time = round((curr_data.bhv.bhv_times{curr_trial}.states.reward_delay(1) + ...
                    curr_xsg_bhv_offset)*1000);
            else
                curr_reward_time = round((curr_data.bhv.bhv_times{curr_trial}.states.reward(1) + ...
                    curr_xsg_bhv_offset)*1000);
            end
            
            % Get the boundaries of the movement that overlaps with reward
            curr_rewarded_movement_onset = curr_reward_time - find( ...
                ~lever_active(curr_reward_time:-1:1),1) + 2;
            curr_rewarded_movement_offset = curr_reward_time + find( ...
                ~lever_active(curr_reward_time:end),1) - 2;
            
            [~,curr_move_onset_frames(curr_trial)] = ...
                min(abs(curr_data.bhv.frame_times*1000 - ...
                curr_rewarded_movement_onset));
            
            % Get reaction time (cue to movement onset, can be negative if
            % movement is animal moved early)
            curr_reaction_time = curr_rewarded_movement_onset - ...
                (curr_data.bhv.bhv_times{curr_trial}.states.cue(1) + ...
                curr_xsg_bhv_offset)*1000;
            
            % Get movement onset to reward time
            curr_move_to_reward_time = curr_reward_time - curr_rewarded_movement_onset;
            
            % Get total time of rewarded movement
            curr_rewarded_movement_time = curr_rewarded_movement_offset - ...
                curr_rewarded_movement_onset;
            
            % Get the rewarded movement from onset to 3 seconds after movement
            rewarded_movement_back = 1000;
            rewarded_movement_forward = 5000;
            curr_rewarded_movement = lever_force_resample(curr_rewarded_movement_onset-rewarded_movement_back: ...
                curr_rewarded_movement_onset+rewarded_movement_forward);
            
            
            % Package lever data into structure
            analysis(curr_animal).lever(curr_session).reaction_time(curr_trial) = curr_reaction_time;
            analysis(curr_animal).lever(curr_session).move_to_reward_time(curr_trial) = curr_move_to_reward_time;
            analysis(curr_animal).lever(curr_session).rewarded_movement_time(curr_trial) = curr_rewarded_movement_time;
            analysis(curr_animal).lever(curr_session).rewarded_movement{curr_trial} = curr_rewarded_movement;
            
        end
        
        % Define cued movement trials where reaction time is positive
        cued_movement_trials = analysis(curr_animal).lever(curr_session).reaction_time > 0;
        analysis(curr_animal).lever(curr_session).cued_movement_trials = cued_movement_trials;
        
        
        