%% Classify ROIs

classified_rois = AP_classify_movement_cells_continuous(data,analysis);


%% Compare movement to activity correlation / move-act corr slope

% requires: behavior analysis, 
% across day move-act corr (prelim_move)
% avg act corr (150527)

figure; 

subplot(3,3,1);
imagesc(nanmean(movement_corr_grid,3));
colormap(hot);
title('Movement')

subplot(3,3,2);
imagesc(nanmean(act_aligned_corr_move,3));
colormap(hot);
title('Aligned activity')

subplot(3,3,3);
imagesc(corr_slope);
colormap(hot);
title('Act-move slope');

move_corr = nanmean(movement_corr_grid,3);

actmove_corrslope_tril = AP_itril(corr_slope,-1);
move_corr_tril = AP_itril(nanmean(movement_corr_grid,3),-1);
act_corr_tril = AP_itril(nanmean(act_aligned_corr_move,3),-1);

subplot(3,3,4);
plot(move_corr_tril,actmove_corrslope_tril,'.k');
xlabel('Move corr');
ylabel('Act-move slope')

subplot(3,3,5);
plot(move_corr_tril,act_corr_tril,'.k');
xlabel('Move corr');
ylabel('Act corr')

subplot(3,3,6);
plot(actmove_corrslope_tril,act_corr_tril,'.k');
xlabel('Act-move slope');
ylabel('Act corr')

% Bin movement corr for plotting
move_corr_bin = linspace(min(move_corr_tril),max(move_corr_tril),10);
move_corr_bincenters = move_corr_bin(1:end-1) + diff(move_corr_bin)/2;
move_corr_bin(end) = Inf;
[~,bins] = histc(move_corr_tril,move_corr_bin);
act_meanci = grpstats(act_corr_tril,bins,'std');

% Correlation between move-act corr slope and movement correlation
curr_r = corrcoef(move_corr_tril,actmove_corrslope_tril);
r = curr_r(2);

n_shuff = 1000;
r_shuff = nan(n_shuff,1);
for curr_shuff = 1:n_shuff
    a = AP_itril(shake(nanmean(movement_corr_grid,3),'diag'),-1);
    b = AP_itril(shake(corr_slope,'diag'),-1);
    curr_r = corrcoef(a,b);
    r_shuff(curr_shuff) = curr_r(2);
    
    disp(curr_shuff);
end

r_rank = tiedrank([r;r_shuff]);
r_p = r_rank(1)/length([r;r_shuff]);

subplot(3,3,7); hold on;
hist(r_shuff,20);
line([r,r],ylim,'color','r')
title('Move corr, act-move slope')

% Correlation between avg act correlation and movement correlation
curr_r = corrcoef(move_corr_tril,act_corr_tril);
r = curr_r(2);
n_shuff = 1000;
r_shuff = nan(n_shuff,1);
for curr_shuff = 1:n_shuff
    a = AP_itril(shake(nanmean(movement_corr_grid,3),'diag'),-1);
    b = AP_itril(shake(nanmean(act_aligned_corr_move,3),'diag'),-1);    
    curr_r = corrcoef(a,b);
    r_shuff(curr_shuff) = curr_r(2);   
    
    disp(curr_shuff);
end

r_rank = tiedrank([r;r_shuff]);
r_p = r_rank(1)/length([r;r_shuff]);

subplot(3,3,8); hold on;
hist(r_shuff,20);
line([r,r],ylim,'color','r')
title('Move corr, act corr')

% Correlation between avg act correlation and move-act corr slope
curr_r = corrcoef(actmove_corrslope_tril,act_corr_tril);
r = curr_r(2);

n_shuff = 1000;
r_shuff = nan(n_shuff,1);
for curr_shuff = 1:n_shuff
    a = shake(corr_slope,'diag');
    b = shake(nanmean(act_aligned_corr_move,3),'diag');
    curr_r = corrcoef(AP_itril(a,-1),AP_itril(b,-1));
    r_shuff(curr_shuff) = curr_r(2);
    disp(curr_shuff);
end

r_rank = tiedrank([r;r_shuff]);
r_p = r_rank(1)/length([r;r_shuff]);

subplot(3,3,9); hold on;
hist(r_shuff,20);
line([r,r],ylim,'color','r')
title('Act-move slope, act corr')

set(gcf,'Name','Diagonal shuffle r')

%% Quiescent activity over days
% Do all the changes keep a constant baseline activity?

avg_movement_act = cell(length(data),1);
avg_quiescent_act = cell(length(data),1);

for curr_animal = 1:length(data)
        
    n_rois = size(data(curr_animal).im(1).roi_trace_df,1);
    
    curr_avg_movement_act = nan(n_rois,14);
    curr_avg_quiescent_act = nan(n_rois,14);
    
     for i = 1:14
        curr_avg_movement_act(:,i) = nanmean(data(curr_animal).im(i). ...
            roi_trace_thresh(:,analysis(curr_animal).lever(i).lever_move_frames),2);
        curr_avg_quiescent_act(:,i) = nanmean(data(curr_animal).im(i). ...
            roi_trace_thresh(:,~analysis(curr_animal).lever(i).lever_move_frames),2);
     end
    
    avg_movement_act{curr_animal} = curr_avg_movement_act;
    avg_quiescent_act{curr_animal} = curr_avg_quiescent_act;
        
    disp(curr_animal);
end


figure;

subplot(2,2,1); hold on;
curr_act = cell2mat(cellfun(@nanmean,avg_movement_act,'uni',false));
plot(curr_act');
errorbar(nanmean(curr_act),nanstd(curr_act)./sqrt(sum(~isnan(curr_act))),'k','linewidth',2)
title('Average movement activity');
xlabel('Day')
ylabel('Average \DeltaF/F')

subplot(2,2,2); hold on;
curr_act = cell2mat(cellfun(@nanmean,avg_quiescent_act,'uni',false));
plot(curr_act');
errorbar(nanmean(curr_act),nanstd(curr_act)./sqrt(sum(~isnan(curr_act))),'k','linewidth',2)
title('Average quiescent activity')
xlabel('Day')
ylabel('Average \DeltaF/F')

subplot(2,2,3); hold on;
curr_act = cell2mat(cellfun(@nanmean,avg_movement_act,'uni',false));
curr_act = bsxfun(@times,curr_act,1./curr_act(:,1));
plot(curr_act');
errorbar(nanmean(curr_act),nanstd(curr_act)./sqrt(sum(~isnan(curr_act))),'k','linewidth',2)
title('Normalized movement activity');
xlabel('Day')
ylabel('Average \DeltaF/F')

subplot(2,2,4); hold on;
curr_act = cell2mat(cellfun(@nanmean,avg_quiescent_act,'uni',false));
curr_act = bsxfun(@times,curr_act,1./curr_act(:,1));
plot(curr_act');
errorbar(nanmean(curr_act),nanstd(curr_act)./sqrt(sum(~isnan(curr_act))),'k','linewidth',2)
title('Normalized quiescent activity')
xlabel('Day')
ylabel('Average \DeltaF/F')


%% Quiescent activity over time/trials

avg_movement_act = cell(length(data),1);
avg_quiescent_act = cell(length(data),1);

for curr_animal = 1:length(data)
        
    n_rois = size(data(curr_animal).im(1).roi_trace_df,1);
    
    curr_avg_movement_act = nan(n_rois,14);
    curr_avg_quiescent_act = nan(n_rois,14);
    
    for i = 1:14
        curr_m = classified_rois(curr_animal).movement(:,i);
        curr_q = classified_rois(curr_animal).quiescent(:,i);
        
        
        curr_avg_movement_act(curr_m,i) = nanmean(data(curr_animal).im(i). ...
            roi_trace_thresh(curr_m,analysis(curr_animal).lever(i).lever_move_frames),2);
        curr_avg_quiescent_act(curr_q,i) = nanmean(data(curr_animal).im(i). ...
            roi_trace_thresh(curr_q,~analysis(curr_animal).lever(i).lever_move_frames),2);
    end
    
    avg_movement_act{curr_animal} = curr_avg_movement_act;
    avg_quiescent_act{curr_animal} = curr_avg_quiescent_act;
        
    disp(curr_animal);
end

m_q_r = nan(curr_animal,curr_day);
m_q_p = nan(curr_animal,curr_day);
for curr_animal = 1:8   
    
    %figure;
    
    for curr_day = 1:14;
        
        % Get quiescent activity that's not within ~1 sec of movement
        move_leeway = 1;
        move_leeway_filt = ones(1,move_leeway);
        
        curr_move = analysis(curr_animal).lever(curr_day).lever_move_frames;
        curr_move_leeway = conv(+curr_move,move_leeway_filt,'same') > 0;
        
        % curr_quiescent_act = ...
        %     nanmean(data(curr_animal).im(curr_day).roi_trace_thresh(:,~curr_move_leeway,1));
        %
        % curr_move_act = ...
        %     nanmean(data(curr_animal).im(curr_day).roi_trace_thresh(:,curr_move_leeway,1));
        
        curr_quiescent_act = ...
            nanmean(data(curr_animal).im(curr_day).roi_trace_thresh( ...
            classified_rois(curr_animal).quiescent(:,curr_day),~curr_move_leeway,1));
        
        curr_move_act = ...
            nanmean(data(curr_animal).im(curr_day).roi_trace_thresh( ...
            classified_rois(curr_animal).movement(:,curr_day),curr_move_leeway,1));
        
        % smooth activity
        curr_q_smooth = smooth(curr_quiescent_act,5000);
        curr_m_smooth = smooth(curr_move_act,5000);
        
        % Interpolate across gaps for move/quiescent
        curr_q_interp = nan(size(curr_move_leeway));
        curr_q_interp(~curr_move_leeway) = curr_q_smooth;
        curr_q_interp(1) = curr_q_interp(find(~curr_move_leeway,1));
        curr_q_interp(end) = curr_q_interp(find(~curr_move_leeway,1,'last'));
        curr_q_interp(isnan(curr_q_interp)) = interp1(find(~isnan(curr_q_interp)), ...
            curr_q_interp(~isnan(curr_q_interp)),find(isnan(curr_q_interp)));

        curr_m_interp = nan(size(curr_move_leeway));
        curr_m_interp(curr_move_leeway) = curr_m_smooth;
        curr_m_interp(1) = curr_m_interp(find(curr_move_leeway,1));
        curr_m_interp(end) = curr_m_interp(find(curr_move_leeway,1,'last'));
        curr_m_interp(isnan(curr_m_interp)) = interp1(find(~isnan(curr_m_interp)), ...
            curr_m_interp(~isnan(curr_m_interp)),find(isnan(curr_m_interp)));
        
        [curr_r,curr_p] = corrcoef(curr_q_interp,curr_m_interp);
        
        m_q_r(curr_animal,curr_day) = curr_r(2);
        m_q_p(curr_animal,curr_day) = curr_p(2);  
        
        %subplot(4,4,curr_day); hold on;
        %plot(curr_q_interp,'k');
        %plot(curr_m_interp,'r');
        
    end
end
disp('done')

% no figure from this yet: doesn't look like it goes down over the day but
% does peak after movements, not clear if coming back to "baseline" or
% actual peak in activity


%% Fano factor / variability around movement

% Movement onset fano factor: all ROIs, movement rois, quiescent rois
ff_onset_all = nan(14,181,8);
ff_onset_m = nan(14,181,8);
ff_onset_q = nan(14,181,8);
for curr_animal = 1:length(analysis)
    
    curr_ff = nan(size(analysis(curr_animal).im(1).move_onset_aligned,3), ...
        size(analysis(curr_animal).im(1).move_onset_aligned,2),14);
    
    for curr_day = 1:14
        
        curr_data = analysis(curr_animal).im(curr_day).move_onset_aligned;

        m_rois = classified_rois(curr_animal).movement(:,curr_day);
        q_rois = classified_rois(curr_animal).quiescent(:,curr_day);        
        
        ff_onset_all(curr_day,:,curr_animal) = ...
            nanmean(permute(var(curr_data(:,:,:),1)./ ...
            mean(curr_data(:,:,:),1),[3 2 1]),1);
        
        ff_onset_m(curr_day,:,curr_animal) = ...
            nanmean(permute(var(curr_data(:,:,m_rois),1)./ ...
            mean(curr_data(:,:,m_rois),1),[3 2 1]),1);
        
        ff_onset_q(curr_day,:,curr_animal) = ...
            nanmean(permute(var(curr_data(:,:,q_rois),1)./ ...
            mean(curr_data(:,:,q_rois),1),[3 2 1]),1);
        
    end
    
end
ff_onset_all_avg = nanmean(bsxfun(@times,ff_onset_all,1./nanmedian(ff_onset_all(1,1:10,:),2)),3);
ff_onset_m_avg = nanmean(bsxfun(@times,ff_onset_m,1./nanmedian(ff_onset_m(1,1:10,:),2)),3);
ff_onset_q_avg = nanmean(bsxfun(@times,ff_onset_q,1./nanmedian(ff_onset_q(1,1:10,:),2)),3);

% Movement offset fano factor: all ROIs, movement rois, quiescent rois
ff_offset_all = nan(14,181,8);
ff_offset_m = nan(14,181,8);
ff_offset_q = nan(14,181,8);
for curr_animal = 1:length(analysis)
    
    curr_ff = nan(size(analysis(curr_animal).im(1).move_offset_aligned,3), ...
        size(analysis(curr_animal).im(1).move_offset_aligned,2),14);
    
    for curr_day = 1:14
        
        curr_data = analysis(curr_animal).im(curr_day).move_offset_aligned;

        m_rois = classified_rois(curr_animal).movement(:,curr_day);
        q_rois = classified_rois(curr_animal).quiescent(:,curr_day);        
        
        ff_offset_all(curr_day,:,curr_animal) = ...
            nanmean(permute(var(curr_data(:,:,:),1)./ ...
            mean(curr_data(:,:,:),1),[3 2 1]),1);
        
        ff_offset_m(curr_day,:,curr_animal) = ...
            nanmean(permute(var(curr_data(:,:,m_rois),1)./ ...
            mean(curr_data(:,:,m_rois),1),[3 2 1]),1);
        
        ff_offset_q(curr_day,:,curr_animal) = ...
            nanmean(permute(var(curr_data(:,:,q_rois),1)./ ...
            mean(curr_data(:,:,q_rois),1),[3 2 1]),1);
        
    end
    
end
ff_offset_all_avg = nanmean(bsxfun(@times,ff_offset_all,1./nanmedian(ff_offset_all(1,1:10,:),2)),3);
ff_offset_m_avg = nanmean(bsxfun(@times,ff_offset_m,1./nanmedian(ff_offset_m(1,1:10,:),2)),3);
ff_offset_q_avg = nanmean(bsxfun(@times,ff_offset_q,1./nanmedian(ff_offset_q(1,1:10,:),2)),3);

% Plot fano factor of roi classes over days 
figure;
col = jet(14);

subplot(2,3,1); hold on;
for i = 1:14
plot(ff_onset_all_avg(i,:),'color',col(i,:),'linewidth',2);
end
line([90,90],ylim,'color','k','linestyle','--');
title('Movement onset (all ROIs)');
ylabel('Fano factor (normalized)');

subplot(2,3,2); hold on;
for i = 1:14
plot(ff_onset_m_avg(i,:),'color',col(i,:),'linewidth',2);
end
line([90,90],ylim,'color','k','linestyle','--');
title('Movement onset (m ROIs)');
ylabel('Fano factor (normalized)');

subplot(2,3,3); hold on;
for i = 1:14
plot(ff_onset_q_avg(i,:),'color',col(i,:),'linewidth',2);
end
line([90,90],ylim,'color','k','linestyle','--');
title('Movement onset (q ROIs)');
ylabel('Fano factor (normalized)');

subplot(2,3,4); hold on;
for i = 1:14
plot(ff_offset_all_avg(i,:),'color',col(i,:),'linewidth',2);
end
line([90,90],ylim,'color','k','linestyle','--');
title('Movement offset (all ROIs)');
ylabel('Fano factor (normalized)');

subplot(2,3,5); hold on;
for i = 1:14
plot(ff_offset_m_avg(i,:),'color',col(i,:),'linewidth',2);
end
line([90,90],ylim,'color','k','linestyle','--');
title('Movement offset (m ROIs)');
ylabel('Fano factor (normalized)');

subplot(2,3,6); hold on;
for i = 1:14
plot(ff_offset_q_avg(i,:),'color',col(i,:),'linewidth',2);
end
line([90,90],ylim,'color','k','linestyle','--');
title('Movement offset (q ROIs)');
ylabel('Fano factor (normalized)');

% Plot average fano factor within roi class, compare to mean activity
figure;

subplot(2,2,1); hold on;
plot(nanmean(nanmean(ff_onset_all),3),'k')
plot(nanmean(nanmean(ff_onset_m),3),'color',[0,0.8,0])
plot(nanmean(nanmean(ff_onset_q),3),'r')
ylabel('Fano factor');
legend({'All' 'M' 'Q'},'location','sw')
line([90,90],ylim,'color','k','linestyle','--');
title('Movement onset');

subplot(2,2,2); hold on;
plot(nanmean(nanmean(ff_offset_all),3),'k')
plot(nanmean(nanmean(ff_offset_m),3),'color',[0,0.8,0])
plot(nanmean(nanmean(ff_offset_q),3),'r')
ylabel('Fano factor');
legend({'All' 'M' 'Q'},'location','sw')
line([90,90],ylim,'color','k','linestyle','--');
title('Movement offset');

% Movement onset fano factor: all ROIs, movement rois, quiescent rois
avg_act_onset_m = cell(8,1);
avg_act_onset_q = cell(8,1);
avg_act_onset_all = cell(8,1);
avg_act_offset_m = cell(8,1);
avg_act_offset_q = cell(8,1);
avg_act_offset_all = cell(8,1);
for curr_animal = 1:length(analysis)

    for curr_day = 1:14
        
        m_rois = classified_rois(curr_animal).movement(:,curr_day);
        q_rois = classified_rois(curr_animal).quiescent(:,curr_day);
        
        curr_act = permute(nanmean(analysis(curr_animal).im(curr_day).move_onset_aligned,1),[3 2 1]);                     
        avg_act_onset_m{curr_animal}(curr_day,:) = nanmean(curr_act(m_rois,:),1);
        avg_act_onset_q{curr_animal}(curr_day,:) = nanmean(curr_act(q_rois,:),1);
        avg_act_onset_all{curr_animal}(curr_day,:) = nanmean(curr_act(:,:),1);
        
        curr_act = permute(nanmean(analysis(curr_animal).im(curr_day).move_offset_aligned,1),[3 2 1]);                     
        avg_act_offset_m{curr_animal}(curr_day,:) = nanmean(curr_act(m_rois,:),1);
        avg_act_offset_q{curr_animal}(curr_day,:) = nanmean(curr_act(q_rois,:),1);   
        avg_act_offset_all{curr_animal}(curr_day,:) = nanmean(curr_act(:,:),1);
        
    end

end

subplot(2,2,3); hold on;
plot(nanmean(vertcat(avg_act_onset_all{:})),'k');
plot(nanmean(vertcat(avg_act_onset_m{:})),'color',[0,0.8,0]);
plot(nanmean(vertcat(avg_act_onset_q{:})),'r');
ylabel('Average \DeltaF/F');
legend({'All' 'M' 'Q'},'location','sw')
line([90,90],ylim,'color','k','linestyle','--');
title('Movement onset');

subplot(2,2,4); hold on;
plot(nanmean(vertcat(avg_act_offset_all{:})),'k');
plot(nanmean(vertcat(avg_act_offset_m{:})),'color',[0,0.8,0]);
plot(nanmean(vertcat(avg_act_offset_q{:})),'r');
ylabel('Average \DeltaF/F');
legend({'All' 'M' 'Q'},'location','sw')
line([90,90],ylim,'color','k','linestyle','--');
title('Movement offset');



%% Reliability by class

% get reliability by max time
max_reliability_all = cell(8,1);
max_reliability_m = cell(8,1);
max_reliability_q = cell(8,1);
for curr_animal = 1:8;
    for curr_day = 1:14
        
        m_rois = classified_rois(curr_animal).movement(:,curr_day);
        q_rois = classified_rois(curr_animal).quiescent(:,curr_day);
              
        curr_act = ...
            permute(nanmean(analysis(curr_animal).im(curr_day).move_onset_aligned(:,:,:) > 0,1),[3 2 1]);        
        
        max_reliability_all{curr_animal}(curr_day) = nanmean(max(curr_act(:,:),[],2));
        max_reliability_m{curr_animal}(curr_day) = nanmean(max(curr_act(m_rois,:),[],2));
        max_reliability_q{curr_animal}(curr_day) = nanmean(max(curr_act(q_rois,:),[],2));
    end
end

figure; hold on;
plot(nanmean(cell2mat(max_reliability_all)),'k');
plot(nanmean(cell2mat(max_reliability_m)),'g');
plot(nanmean(cell2mat(max_reliability_q)),'r');

ylabel('Average max reliability');
legend({'All','M','Q'});
xlabel('Day');



%% ROI classification turnover FUTURE
% This compliments the one in the last script 

% Get fraction of currently classified ROIs that will be classified future
m2m = nan(length(data),14);
for curr_animal = 1:length(data)
m2m(curr_animal,:) = ...
    (sum((fliplr(cumsum(fliplr(classified_rois(curr_animal).movement),2)) > 1).* ...
    classified_rois(curr_animal).movement))./ ...
    sum(classified_rois(curr_animal).movement);
end
q2q = nan(length(data),14);
for curr_animal = 1:length(data)
q2q(curr_animal,:) = ...
    (sum((fliplr(cumsum(fliplr(classified_rois(curr_animal).quiescent),2)) > 1).* ...
    classified_rois(curr_animal).quiescent))./ ...
    sum(classified_rois(curr_animal).quiescent);
end
q2m = nan(length(data),14);
for curr_animal = 1:length(data)
q2m(curr_animal,:) = ...
    (sum((fliplr(cumsum(fliplr(classified_rois(curr_animal).movement),2)) >= 1).* ...
    classified_rois(curr_animal).quiescent))./ ...
    sum(classified_rois(curr_animal).quiescent);
end
m2q = nan(length(data),14);
for curr_animal = 1:length(data)
m2q(curr_animal,:) = ...
    (sum((fliplr(cumsum(fliplr(classified_rois(curr_animal).quiescent),2)) >= 1).* ...
    classified_rois(curr_animal).movement))./ ...
    sum(classified_rois(curr_animal).movement);
end
    
    
n_rep = 5000;

m2m_shuff_1 = nan(length(data),14,n_rep);
q2q_shuff_1 = nan(length(data),14,n_rep);
m2q_shuff_1 = nan(length(data),14,n_rep);
q2m_shuff_1 = nan(length(data),14,n_rep);

m2m_shuff_2 = nan(length(data),14,n_rep);
q2q_shuff_2 = nan(length(data),14,n_rep);
m2q_shuff_2 = nan(length(data),14,n_rep);
q2m_shuff_2 = nan(length(data),14,n_rep);

% Get shuffled values of fraction previously classified
for curr_rep = 1:n_rep
    shuff_classified_movement = arrayfun(@(x) shake(classified_rois(x).movement,1),1:length(data),'uni',false);
    shuff_classified_quiescent = arrayfun(@(x) shake(classified_rois(x).quiescent,1),1:length(data),'uni',false);
    
    % Get fraction of currently classified ROIs that were classified previously
    for curr_animal = 1:length(data)
        m2m_shuff_1(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_movement{curr_animal}),2)) > 1).* ...
            shuff_classified_movement{curr_animal}))./ ...
            sum(shuff_classified_movement{curr_animal});
    end
    for curr_animal = 1:length(data)
        q2q_shuff_1(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_quiescent{curr_animal}),2)) > 1).* ...
            shuff_classified_quiescent{curr_animal}))./ ...
            sum(shuff_classified_quiescent{curr_animal});
    end
    for curr_animal = 1:length(data)
        q2m_shuff_1(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_movement{curr_animal}),2)) >= 1).* ...
            shuff_classified_quiescent{curr_animal}))./ ...
            sum(shuff_classified_quiescent{curr_animal});
    end
    for curr_animal = 1:length(data)
        m2q_shuff_1(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_quiescent{curr_animal}),2)) >= 1).* ...
            shuff_classified_movement{curr_animal}))./ ...
            sum(shuff_classified_movement{curr_animal});
    end
    
    
    shuff_classified_movement = arrayfun(@(x) shake(classified_rois(x).movement,2),1:length(data),'uni',false);
    shuff_classified_quiescent = arrayfun(@(x) shake(classified_rois(x).quiescent,2),1:length(data),'uni',false);
    
    % Get fraction of currently classified ROIs that were classified previously
    for curr_animal = 1:length(data)
        m2m_shuff_2(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_movement{curr_animal}),2)) > 1).* ...
            shuff_classified_movement{curr_animal}))./ ...
            sum(shuff_classified_movement{curr_animal});
    end
    for curr_animal = 1:length(data)
        q2q_shuff_2(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_quiescent{curr_animal}),2)) > 1).* ...
            shuff_classified_quiescent{curr_animal}))./ ...
            sum(shuff_classified_quiescent{curr_animal});
    end
    for curr_animal = 1:length(data)
        q2m_shuff_2(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_movement{curr_animal}),2)) > 1).* ...
            shuff_classified_quiescent{curr_animal}))./ ...
            sum(shuff_classified_quiescent{curr_animal});
    end
    for curr_animal = 1:length(data)
        m2q_shuff_2(curr_animal,:,curr_rep) = ...
            (sum((fliplr(cumsum(fliplr(shuff_classified_quiescent{curr_animal}),2)) > 1).* ...
            shuff_classified_movement{curr_animal}))./ ...
            sum(shuff_classified_movement{curr_animal});
    end
    disp(curr_rep)
end

% Plot fraction of currently classified ROIs previously classified
figure; 
subplot(2,2,1);hold on;
errorbar(nanmean(m2m), ...
    nanstd(m2m)./sqrt(sum(~isnan(m2m))),'k','linewidth',2)
plot(permute(prctile(nanmean(m2m_shuff_1,1),[2.5 97.5],3),[2 3 1]),'r')
plot(permute(prctile(nanmean(m2m_shuff_2,1),[2.5 97.5],3),[2 3 1]),'b')

xlabel('Day');
ylabel('Fraction of classified ROIs');
title('Movement to movement');
subplot(2,2,2);hold on;
errorbar(nanmean(q2q), ...
    nanstd(q2q)./sqrt(sum(~isnan(q2q))),'k','linewidth',2)
plot(permute(prctile(nanmean(q2q_shuff_1,1),[2.5 97.5],3),[2 3 1]),'r')
plot(permute(prctile(nanmean(q2q_shuff_2,1),[2.5 97.5],3),[2 3 1]),'b')
xlabel('Day');
ylabel('Fraction of classified ROIs');
title('Quiescent to quiescent');
subplot(2,2,3);hold on;
errorbar(nanmean(m2q), ...
    nanstd(m2q)./sqrt(sum(~isnan(m2q))),'k','linewidth',2)
plot(permute(prctile(nanmean(m2q_shuff_1,1),[2.5 97.5],3),[2 3 1]),'r')
plot(permute(prctile(nanmean(m2q_shuff_2,1),[2.5 97.5],3),[2 3 1]),'b')
xlabel('Day');
ylabel('Fraction of classified ROIs');
title('Movement to quiescent');
subplot(2,2,4);hold on;
errorbar(nanmean(q2m), ...
    nanstd(q2m)./sqrt(sum(~isnan(q2m))),'k','linewidth',2)
plot(permute(prctile(nanmean(q2m_shuff_1,1),[2.5 97.5],3),[2 3 1]),'r')
plot(permute(prctile(nanmean(q2m_shuff_2,1),[2.5 97.5],3),[2 3 1]),'b')
xlabel('Day');
ylabel('Fraction of classified ROIs');
title('Quiescent to movement');
    
    
set(gcf,'Name','% future classified');
    
%% ROI classification overlap and switching

% Plot the fraction of classified ROIs on one day overlapping with another
m2m_overlap_grid = nan(14,14,length(data));
q2q_overlap_grid = nan(14,14,length(data));
m2q_overlap_grid = nan(14,14,length(data));
q2m_overlap_grid = nan(14,14,length(data));
for curr_animal = 1:length(data)
   for curr_day1 = 1:14;
       for curr_day2 = 1:14;
           % m2m
           curr_overlap = +classified_rois(curr_animal).movement(:,curr_day1)'* ...
               +classified_rois(curr_animal).movement(:,curr_day2);
           curr_total = sum(classified_rois(curr_animal).movement(:,curr_day1));
           
           m2m_overlap_grid(curr_day1,curr_day2,curr_animal) = curr_overlap./curr_total;  
           
           % q2q
           curr_overlap = +classified_rois(curr_animal).quiescent(:,curr_day1)'* ...
               +classified_rois(curr_animal).quiescent(:,curr_day2);
           curr_total = sum(classified_rois(curr_animal).quiescent(:,curr_day1));
           
           q2q_overlap_grid(curr_day1,curr_day2,curr_animal) = curr_overlap./curr_total;  
           
           % m2q
           curr_overlap = +classified_rois(curr_animal).movement(:,curr_day1)'* ...
               +classified_rois(curr_animal).quiescent(:,curr_day2);
           curr_total = sum(classified_rois(curr_animal).movement(:,curr_day1));
           
           m2q_overlap_grid(curr_day1,curr_day2,curr_animal) = curr_overlap./curr_total;  
           
           % q2m
           curr_overlap = +classified_rois(curr_animal).quiescent(:,curr_day1)'* ...
               +classified_rois(curr_animal).movement(:,curr_day2);
           curr_total = sum(classified_rois(curr_animal).quiescent(:,curr_day1));
           
           q2m_overlap_grid(curr_day1,curr_day2,curr_animal) = curr_overlap./curr_total;  
       end
   end    
end

figure;
subplot(2,2,1);
imagesc(nanmean(m2m_overlap_grid,3));colormap(hot)
ylabel('Denominator ROIs')
xlabel('Overlap ROIs')
title('M2M')
subplot(2,2,2);
imagesc(nanmean(q2q_overlap_grid,3));colormap(hot)
ylabel('Denominator ROIs')
xlabel('Overlap ROIs')
title('Q2Q')
subplot(2,2,3);
imagesc(nanmean(m2q_overlap_grid,3));colormap(hot)
ylabel('Denominator ROIs')
xlabel('Overlap ROIs')
title('M2Q')
subplot(2,2,4);
imagesc(nanmean(q2m_overlap_grid,3));colormap(hot)
ylabel('Denominator ROIs')
xlabel('Overlap ROIs')
title('Q2M')



% Plot the Q and M/Q ratio with and without the M2Q ROIs

move_frac = cell2mat(cellfun(@(x) nanmean(x,1),{classified_rois(:).movement}','uni',false));
quiescent_frac = cell2mat(cellfun(@(x) nanmean(x,1),{classified_rois(:).quiescent}','uni',false));
figure; hold on
errorbar(nanmean(move_frac),nanstd(move_frac)./sqrt(sum(~isnan(move_frac))),'k','linewidth',2)
errorbar(nanmean(quiescent_frac),nanstd(quiescent_frac)./sqrt(sum(~isnan(quiescent_frac))),'r','linewidth',2)
ylabel('Fraction of ROIs');
xlabel('Day');
legend({'Movement-related' 'Quiescence-related'})

mq_ratio = move_frac./quiescent_frac;
figure;
errorbar(nanmean(mq_ratio),nanstd(mq_ratio)./sqrt(sum(~isnan(mq_ratio))),'k','linewidth',2);
ylabel('Movement/Quiescent fraction')
xlabel('Day')



nonflip_q = nan(length(data),14);
for curr_animal = 1:length(data)
    curr_m2q = ...
        any((cumsum(classified_rois(curr_animal).movement,2) >= 1).* ...
        classified_rois(curr_animal).quiescent,2);
    
    curr_q = classified_rois(curr_animal).quiescent;
    curr_q(curr_m2q,:) = false;
    
    nonflip_q(curr_animal,:) = nanmean(curr_q);
end

all_q = cell2mat(cellfun(@nanmean,{classified_rois(:).quiescent}','uni',false));
all_m = cell2mat(cellfun(@nanmean,{classified_rois(:).movement}','uni',false));

nonflip_mq_ratio = 


figure; 
subplot(2,1,1); hold on;
errorbar(nanmean(all_q),nanstd(all_q)./sqrt(sum(~isnan(all_q))),'k','linewidth',2);
errorbar(nanmean(nonflip_q),nanstd(nonflip_q)./sqrt(sum(~isnan(nonflip_q))),'r','linewidth',2);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


